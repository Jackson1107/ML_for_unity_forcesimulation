1、字符串问题
优量在线原版运行中，setup_logger.py---MultiprocessHandler()中---self.filePath = datetime.now().strftime(self.filefmt)因为原版是py2.7，改版成
py3.X后，字符问题str-unicode，导致出错

参考解决方法：time.strftime(u'%Y 年'.encode('unicode-escape').decode(), *args).encode().decode('unicode-escape')

具体解决方法：
（1）249行改为：
#使用当前时间，格式化文件格式化字符串
self.filePath = datetime.now().strftime(self.filefmt.encode('unicode-escape').decode()).encode().decode('unicode-escape')
（2）271行改为：
#以当前时间获得新日志文件路径
_filePath = datetime.now().strftime(self.filefmt.encode('unicode-escape').decode()).encode().decode('unicode-escape')
        

2、增加初始资金设置
修改文件：ctaBacktesting.py，大约在264行
在 def setPriceTick(self, priceTick)下面新增函数：
    # ----------------------------------------------------------------------
    def setInitCapital(self, initCapital):
        """设置初始资金"""
        self.initCapital = initCapital


3、策略启动时间修改
修改文件：ctaBacktesting.py，大约187行的setStartDate()函数
修改为：
    #----------------------------------------------------------------------
    def setStartDate(self, startDate='20100416', initDays=10):
        """设置回测的启动日期"""
        # 储存参数
        self.startDate = startDate  # 策略开始运行日期,"%Y%m%d"
        self.initDays = initDays    # 策略初始化回放天数,int
        # 策略开始运行的时间（即输入的时间）
        self.strategyStartDate = datetime.strptime(startDate, '%Y%m%d')
        # 数据准备时间(往前推initDays天)
        self.dataStartDate = self.strategyStartDate - timedelta(initDays)

4、修改策略实例名称
修改文件：ctaBacktesting.py，大约76行
多加一个"%H"
self.strategy_name = 'strategy_{}'.format(datetime.now().strftime('%H%M%S'))  # 回测策略的实例名字

5、策略初始化数据问题
因为ctaBacktesting.py回测引擎的loadBar()函数不需要传入参数，因此，
（1）将ctaBacktesting.py，大约2121行的loadBar(self)改为：
    #----------------------------------------------------------------------
    def loadBar(self):
        """直接返回初始化数据列表中的Bar"""
        return self.initData
（2）将ctaTemplate.py大约237行的loadBar()函数修改为:
    #----------------------------------------------------------------------
    def loadBar(self):
        """读取bar数据"""
        return self.ctaEngine.loadBar()
 （3）同时策略文件def onInit(self)下面的
 initData = self.loadBar()里面无需输入参数


6,ctaBacktesting.py中的   crossStopOrder(self)方法中  约2065行
for stopOrderID, so in self.workingStopOrderDict.items():
修改为：
for stopOrderID, so in list(self.workingStopOrderDict.items()):


7，ctaBacktesting.py中的   crossStopOrder(self)方法和crossLimitOrder(self)中:
大约为   1993行   以及    2065行
分别把：
buyCross = order.direction == DIRECTION_LONG and order.price >= buyCrossPrice and vtSymbol.lower() == order.vtSymbol.lower()
sellCross = order.direction == DIRECTION_SHORT and order.price <= sellCrossPrice and vtSymbol.lower() == order.vtSymbol.lower()
以及：
buyCross = so.direction == DIRECTION_LONG and so.price <= buyCrossPrice and vtSymbol.lower() == so.vtSymbol.lower()
sellCross = so.direction == DIRECTION_SHORT and so.price >= sellCrossPrice and vtSymbol.lower() == so.vtSymbol.lower()
都改为：（都注释掉后面的名字判断）
buyCross = order.direction == DIRECTION_LONG and order.price >= buyCrossPrice #and vtSymbol.lower() == order.vtSymbol.lower()
sellCross = order.direction == DIRECTION_SHORT and order.price <= sellCrossPrice #and vtSymbol.lower() == order.vtSymbol.lower()
以及：
buyCross = so.direction == DIRECTION_LONG and so.price <= buyCrossPrice #and vtSymbol.lower() == so.vtSymbol.lower()
sellCross = so.direction == DIRECTION_SHORT and so.price >= sellCrossPrice #and vtSymbol.lower() == so.vtSymbol.lower()



8,ctaBacktesting.py中的   calculateBacktestingResult(self)方法中    大约2907行的
t['OpenTime'] = entryTrade.tradeTime.strftime('%Y/%m/%d %H:%M:%S')
修改为：
t['OpenTime'] = datetime.strptime(entryTrade.tradeTime,'%Y-%m-%d %H:%M:%S').strftime('%Y/%m/%d %H:%M:%S')

t['CloseTime'] = trade.tradeTime.strftime('%Y/%m/%d %H:%M:%S')
修改为：
t['CloseTime'] = datetime.strptime(trade.tradeTime,'%Y-%m-%d %H:%M:%S').strftime('%Y/%m/%d %H:%M:%S')

同样，大约2836行也做同样修改：
t['OpenTime'] = entryTrade.tradeTime.strftime('%Y/%m/%d %H:%M:%S')
修改为：
t['OpenTime'] = datetime.strptime(entryTrade.tradeTime,'%Y-%m-%d %H:%M:%S').strftime('%Y/%m/%d %H:%M:%S')

t['CloseTime'] = trade.tradeTime.strftime('%Y/%m/%d %H:%M:%S')
修改为：
t['CloseTime'] = datetime.strptime(trade.tradeTime,'%Y-%m-%d %H:%M:%S').strftime('%Y/%m/%d %H:%M:%S')

否则出现：AttributeError: 'str' object has no attribute 'strftime'  错误


9，ctaBacktesting.py中的    calculateBacktestingResult(self)中     大约2983行
self.capitalList.append(self.capningital)命名错误，没有self.capningital这玩意
修改为：
self.capitalList.append(self.capital)  我猜应该是self.capital的



onInit()运行了两次


